// <auto-generated />
using Cocotte.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cocotte.Migrations
{
    [DbContext(typeof(CocotteContext))]
    [Migration("20230320145030_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Cocotte.Modules.Activity.Models.Activity", b =>
                {
                    b.Property<ulong>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityName")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActivityType")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("MaxPlayers")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Activity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Cocotte.Modules.Activity.Models.ActivityPlayer", b =>
                {
                    b.Property<ulong>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("ActivityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityPlayers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ActivityPlayer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Cocotte.Modules.Activity.Models.StagedActivity", b =>
                {
                    b.HasBaseType("Cocotte.Modules.Activity.Models.Activity");

                    b.Property<uint>("Stage")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("StagedActivity");
                });

            modelBuilder.Entity("Cocotte.Modules.Activity.Models.ActivityRolePlayer", b =>
                {
                    b.HasBaseType("Cocotte.Modules.Activity.Models.ActivityPlayer");

                    b.Property<byte>("Roles")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("ActivityRolePlayer");
                });

            modelBuilder.Entity("Cocotte.Modules.Activity.Models.ActivityPlayer", b =>
                {
                    b.HasOne("Cocotte.Modules.Activity.Models.Activity", "Activity")
                        .WithMany("ActivityPlayers")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Cocotte.Modules.Activity.Models.Activity", b =>
                {
                    b.Navigation("ActivityPlayers");
                });
#pragma warning restore 612, 618
        }
    }
}
